#include <Arduino.h>
#include <WiFi.h>
#include <WebSocketsServer.h>
#include <ESPAsyncWebServer.h>
#include "GyverTimer.h"

// Настройка таймера
GTimer TimerForFreq(US);

// Пины
#define LOAD_PIN 12 // Пин на нагрузку

// Настройка WiFi
const char* ssid = "ESP32-Access-Point";
const char* password = "12345678";

// WebSocket
WebSocketsServer ws = WebSocketsServer(80);

// HTTP сервер
AsyncWebServer server(81);

// HTML
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
    <title>WebSocket Test</title>
</head>
<body>
    <h1>WebSocket Client</h1>
    <p>Connecting to ESP32...</p>
    <button onclick="sendPower('ON')">Turn ON</button>
    <button onclick="sendPower('OFF')">Turn OFF</button>
    <input type="number" id="freq" placeholder="Frequency in Hz">
    <button onclick="setFrequency()">Set Frequency</button>
    <div id="output"></div>
    <script>
        const ws = new WebSocket('ws://192.168.4.1:80');

        ws.onopen = function() {
            console.log('Connected to ESP32 WebSocket server');
            ws.send('Hello from browser!');
        };

        ws.onmessage = function(event) {
            console.log('Received:', event.data);
            document.getElementById("output").innerHTML += '<p>' + event.data + '</p>';
        };

        ws.onclose = function() {
            console.log('Connection closed');
        };

        function sendPower(state) {
            const command = 'POWER:' + state;
            console.log('Sending:', command);
            ws.send(command);
        }

        function setFrequency() {
            const freq = document.getElementById("freq").value;
            if (!isNaN(freq)) {
                const command = 'SET_FREQ:' + freq;
                console.log('Sending:', command);
                ws.send(command);
            }
        }
    </script>
</body>
</html>
)rawliteral";

// Константы
float frequency = 0.0;   // Частота по умолчанию
bool powerOn = false;    // Состояние питания
float SaveFrequency = 0.0; // Предыдущая сохраненная частота
bool SavePowerOn = false;

// Время последней отправки данных
unsigned long lastTimeSent = 0;

// Счётчик клиентов
int clientCount = 0;

// Максимальное количество клиентов
#define WSA_MAX_CLIENTS 8
String clientBuffers[WSA_MAX_CLIENTS];  // Буферы для каждого клиента

// Обработчик событий WebSocket
void onEvent(uint8_t num, WStype_t type, uint8_t *payload, size_t length) {
  switch (type) {
    case WStype_CONNECTED: {
        clientCount++;
        Serial.printf("[INFO] Client %d connected\n", num);
        Serial.printf("[INFO] Total connected clients: %d\n", clientCount);

        String powerState = powerOn ? "ON" : "OFF";
        ws.sendTXT(num, "POWER:" + powerState + "\n");
        ws.sendTXT(num, "Current Frequency: " + String(frequency) + " Hz\n");
        break;
    }

    case WStype_DISCONNECTED:
      clientCount--;
      Serial.printf("[INFO] Client %d disconnected\n", num);
      Serial.printf("[INFO] Total connected clients: %d\n", clientCount);
      clientBuffers[num] = "";  // Очистить буфер клиента

      if (clientCount == 0) {
        powerOn = false;
        frequency = 0.0f;
        SavePowerOn = false;
        SaveFrequency = 0.0f;

        digitalWrite(LOAD_PIN, LOW);

        Serial.println("[INFO] Power turned OFF and frequency reset to 0 Hz due to client disconnect");
      }
      break;

    case WStype_TEXT: {
      clientBuffers[num] += (char*)payload;

      int newlineIndex = clientBuffers[num].indexOf('\n');
      while (newlineIndex != -1) {
          String message = clientBuffers[num].substring(0, newlineIndex);
          clientBuffers[num] = clientBuffers[num].substring(newlineIndex + 1);

          Serial.printf("[INFO] Received from client %d: '%s'\n", num, message.c_str());

          if (message.startsWith("SET_FREQ:")) {
              String freqValue = message.substring(9);
              frequency = freqValue.toFloat();
              Serial.printf("[INFO] New frequency: %.2f Hz\n", frequency);
              ws.sendTXT(num, "Frequency set to " + freqValue + " Hz\n");
          }
          else if (message.startsWith("POWER:")) {
              String powerCommand = message.substring(6);
              Serial.printf("[DEBUG] Power command received: '%s'\n", powerCommand.c_str());
              if (powerCommand.equalsIgnoreCase("ON")) {
                  powerOn = true;
                  Serial.println("[INFO] Power turned ON");
                  ws.sendTXT(num, "POWER:ON\n");
              } else if (powerCommand.equalsIgnoreCase("OFF")) {
                  powerOn = false;
                  Serial.println("[INFO] Power turned OFF");
                  ws.sendTXT(num, "POWER:OFF\n");
              } else {
                  ws.sendTXT(num, "Unknown power command\n");
              }
          } else {
              Serial.println("[WARN] Unknown message format");
          }

          newlineIndex = clientBuffers[num].indexOf('\n');
      }
      break;
    }

    case WStype_PONG:
      Serial.printf("[INFO] Pong received from client %d\n", num);
      break;

    default:
      break;
  }
}

void setup() {
  Serial.begin(115200);

  // Запуск точки доступа
  WiFi.softAP(ssid, password);
  Serial.println("[INFO] Access Point started");
  Serial.print("[INFO] IP: ");
  Serial.println(WiFi.softAPIP());

  // Инициализация WebSocket
  ws.onEvent(onEvent);
  ws.begin();

  // Настройка HTTP сервера
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html);
  });

  server.begin();
  Serial.println("[INFO] HTTP server started on port 81");

  // Настройка пинов
  pinMode(LOAD_PIN, OUTPUT);
}

void loop() {
  ws.loop();

  // unsigned long currentMillis = millis();
  // static unsigned long lastLog = 0;

  // if (currentMillis - lastTimeSent >= 500) {
  //   lastTimeSent = currentMillis;

  //   String freqMessage = "Current Frequency: " + String(frequency) + " Hz";
  //   ws.broadcastTXT(freqMessage);
  //   Serial.printf("[INFO] Sent frequency: %.2f Hz\n", frequency);

  //   String powerMessage = "POWER:" + String(powerOn ? "ON" : "OFF");
  //   ws.broadcastTXT(powerMessage);
  //   Serial.printf("[INFO] Sent power state: %s\n", powerOn ? "ON" : "OFF");
  // }

  // if (millis() - lastLog > 1000) {
  //   lastLog = millis();
  //   Serial.printf("[DEBUG] Current power state: %s\n", powerOn ? "ON" : "OFF");
  // }

  if (frequency != SaveFrequency) {
    SaveFrequency = frequency;

    String freqMessage = "Current Frequency: " + String(frequency) + " Hz";
    ws.broadcastTXT(freqMessage);
    Serial.printf("[INFO] Sent frequency: %.2f Hz\n", frequency);

    TimerForFreq.setInterval(1/(frequency)*1000000);
  } else if (powerOn != SavePowerOn) {
    SavePowerOn = powerOn;

    String powerMessage = "POWER:" + String(powerOn ? "ON" : "OFF");
    ws.broadcastTXT(powerMessage);
    Serial.printf("[INFO] Sent power state: %s\n", powerOn ? "ON" : "OFF");
  }

  if (powerOn != false) {
    if (int(frequency)==0) {
    digitalWrite(LOAD_PIN, HIGH);
    } else if (TimerForFreq.isReady()) {
    digitalWrite(LOAD_PIN, !digitalRead(LOAD_PIN));
    }
  } else if (powerOn==false){
    digitalWrite(LOAD_PIN, LOW);
  }
}