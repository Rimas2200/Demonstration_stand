#include <Arduino.h>
#include <WiFi.h>
#include <WebSocketsServer.h>
#include <ESPAsyncWebServer.h>

// Настройка WiFi
const char* ssid = "ESP32-Access-Point";
const char* password = "12345678";

// WebSocket
WebSocketsServer ws = WebSocketsServer(80);

// HTTP
AsyncWebServer server(81);

// HTML
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
    <title>WebSocket Test</title>
</head>
<body>
    <h1>WebSocket Client</h1>
    <p>Connecting to ESP32...</p>
    <script>
        const ws = new WebSocket('ws://192.168.4.1:80');

        ws.onopen = function() {
            console.log('Connected to ESP32 WebSocket server');
            ws.send('Hello from browser!');
        };

        ws.onmessage = function(event) {
            console.log('Received:', event.data);
            document.body.innerHTML += '<p>Received: ' + event.data + '</p>';
        };

        ws.onclose = function() {
            console.log('Connection closed');
            document.body.innerHTML += '<p>Connection closed</p>';
        };
    </script>
</body>
</html>
)rawliteral";

// Счётчик подключенных клиентов
int clientCount = 0;

// Константа для частоты
float frequency = 20.0;  // Частота

// Время последней отправки частоты (для отправки каждую секунду)
unsigned long lastTimeSent = 0;

// Обработчик WebSocket
void onEvent(uint8_t num, WStype_t type, uint8_t *payload, size_t length) {
  switch (type) {
    case WStype_CONNECTED:
      clientCount++;
      Serial.printf("[INFO] Client %d connected\n", num);
      Serial.printf("[INFO] Total connected clients: %d\n", clientCount);
      break;
      
    case WStype_DISCONNECTED:
      clientCount--;
      Serial.printf("[INFO] Client %d disconnected\n", num);
      Serial.printf("[INFO] Total connected clients: %d\n", clientCount);
      break;
      
    case WStype_TEXT: {
      String message = (char*)payload;
      Serial.printf("[INFO] Received from client %d: %s\n", num, message.c_str());

      // Проверка на "SET_FREQ:"
      if (message.startsWith("SET_FREQ:")) {
        String freqValue = message.substring(9);
        frequency = freqValue.toFloat();  // Обновление частоты
        Serial.printf("[INFO] New frequency: %.2f Hz\n", frequency);

        // Подтверждение на клиента
        String response = "Frequency set to " + freqValue + " Hz";
        ws.sendTXT(num, response);
      } else {
        Serial.println("[WARN] Unknown message format");
      }
      break;
    }

    case WStype_PONG:
      Serial.printf("[INFO] Pong received from client %d\n", num);
      break;
      
    default:
      break;
  }
}

void setup() {
  Serial.begin(115200);

  // Запуск точки доступа
  WiFi.softAP(ssid, password);
  Serial.println("[INFO] Access Point started");
  Serial.print("[INFO] IP: ");
  Serial.println(WiFi.softAPIP());

  // Настройка WebSocket
  ws.onEvent(onEvent);
  ws.begin();

  // Настройка HTTP
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html);
  });

  server.begin();
  Serial.println("[INFO] HTTP server started on port 81");
}

void loop() {
  ws.loop();

  // Отправка частоты на клиента
  unsigned long currentMillis = millis();
  if (currentMillis - lastTimeSent >= 500) {
    lastTimeSent = currentMillis;

    String freqMessage = "Current Frequency: " + String(frequency) + " Hz";
    ws.broadcastTXT(freqMessage);
    Serial.printf("[INFO] Sent frequency: %.2f Hz\n", frequency);
  }
}
