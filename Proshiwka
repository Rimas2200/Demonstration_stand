#include <Arduino.h>
#include <WiFi.h>
#include <WebSocketsServer.h>
#include <ESPAsyncWebServer.h>

// Настройки WiFi
const char* ssid = "ESP32-Access-Point";
const char* password = "12345678";

// WebSocket сервер
WebSocketsServer ws = WebSocketsServer(80);

// HTTP сервер
AsyncWebServer server(81);

// HTML
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
    <title>WebSocket Test</title>
</head>
<body>
    <h1>WebSocket Client</h1>
    <p>Connecting to ESP32...</p>
    <script>
        const ws = new WebSocket('ws://192.168.4.1:80');

        ws.onopen = function() {
            console.log('Connected to ESP32 WebSocket server');
            ws.send('Hello from browser!');
        };

        ws.onmessage = function(event) {
            console.log('Received:', event.data);
            document.body.innerHTML += '<p>Received: ' + event.data + '</p>';
        };

        ws.onclose = function() {
            console.log('Connection closed');
            document.body.innerHTML += '<p>Connection closed</p>';
        };
    </script>
</body>
</html>
)rawliteral";

// Обработчик WebSocket
void onEvent(uint8_t num, WStype_t type, uint8_t *payload, size_t length) {
  switch (type) {
    case WStype_CONNECTED:
      Serial.printf("[INFO] Client %d connected\n", num);
      Serial.printf("[INFO] Total connected clients: %d\n", ws.connectedClients());
      break;

    case WStype_DISCONNECTED:
      Serial.printf("[INFO] Client %d disconnected\n", num);
      Serial.printf("[INFO] Total connected clients: %d\n", ws.connectedClients());
      break;

    case WStype_TEXT:
      {
        String message = String((char*)payload);
        Serial.printf("[INFO] Received from client %d: %s\n", num, message.c_str());

        if (message.startsWith("SET_FREQ:")) {
          String freqValue = message.substring(9);
          Serial.printf("[INFO] Set frequency to: %s Hz\n", freqValue.c_str());
        }

        // Отправка подтверждения
        ws.sendTXT(num, "[INFO] Frequency received");
      }
      break;

    case WStype_ERROR:
      Serial.printf("[ERROR] Error from client %d\n", num);
      break;

    case WStype_PING:
      Serial.printf("[INFO] Ping received from client %d\n", num);
      break;

    case WStype_PONG:
      Serial.printf("[INFO] Pong received from client %d\n", num);
      break;

    default:
      Serial.printf("[WARN] Unknown event type %d from client %d\n", type, num);
      break;
  }
}

void setup() {
  Serial.begin(115200);
  Serial.println("[INFO] Initializing...");

  // Запуск точки доступа
  WiFi.softAP(ssid, password);
  Serial.println("[INFO] Access Point started");
  Serial.print("[INFO] IP: ");
  Serial.println(WiFi.softAPIP());

  // Настройка WebSocket
  ws.onEvent(onEvent);
  ws.begin();
  Serial.println("[INFO] WebSocket server started on port 80");

  // Настройка HTTP сервера
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html);
    Serial.printf("[INFO] HTTP client %s requested main page\n", request->client()->remoteIP().toString().c_str());
  });

  server.begin();
  Serial.println("[INFO] HTTP server started on port 81");
}

void loop() {
  ws.loop();
}
